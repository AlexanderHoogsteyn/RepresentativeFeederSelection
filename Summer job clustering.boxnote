{"head":7,"savepointDataFileId":"699919347819","savepointListObject":{"6":{"revisionId":6,"timestamp":1596534562709,"state":"pending","type":"session","diffAuthorList":{"11601537228":true}}},"lastEditTimestamp":1596535537345,"diffChangeset":"Z:se>qf*4*g|b-sb*4*g-1*4|4+26*4+2*4*5+6*4|1+1o*4*a+1q*4|1+1*4*b+1j*4|2+3*4+2*4*5+6*4+23*4*c+6*4+dh*4*d+1z*4|2+w*4+2*4*5+6*4+1d*4*e+21*4|1+1*4+25*4*f+6*4|3+94*4+2*4*5+6*4|1+d8*4+1$Hi Alexander,\n \nFollowing are the work expected from you during summer job:\n \n1.      Get familiar with PowerModelsDistribution package of Julia \nhttps://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/\nhttps://github.com/lanl-ansi/PowerModelsDistribution.jl\n \n2.      Add annual kWh in parser createGridDataCollectiob_dataframes.py: The file (\\\\Pola) has annual kWh randomly generated for all consumer of 160 feeders and also the phase is randomly allocated. Suggested Idea to explore is to go through the GIS file where file1 to file7 are smart meter data of 20 days. Modify the createGridDataCollectiob_dataframes.py to get sum of 20 days consumption from smart meter data and multiply by 15 to get annual kWh consumption. Also include the phase of the load which are known (GIS\\\\phase meters.xlsx). I suggest to go through a paper https://www.sciencedirect.com/science/article/abs/pii/S0142061519318836 to understand the raw data. \n \n3.      Implement the clustering algorithm in the paper: https://ieeexplore-ieee-org.kuleuven.ezproxy.kuleuven.be/document/7051294\nThe feeder in which the algorithm has to be applied is in box shared folder (\\\\Pola). It has 160 different feeders and the json file is formed by the python code “createGridDataCollectiob_dataframes.py” attached. The source file is in folder “test_network\\\\Sim_files_190128_Ok_V0\\\\GIS_data” It can be done in python I give you floor to explore opportunities. But I need some report regarding your approach.\n \n \n4.      Next thing is to use parser for PowerModelDistribution. Some good news there is already a parser made by Marta for IEEE European test system and that is also in the box file folder: Parser_Julia. This can be starting point for you to parse the json files or the main GIS file directly to the Julia format. This one will be starting point for your master thesis too. If you manage to do this in your summer job we can do more interesting thing with that file in the semester. \n ","invalidDiffChangeset":false,"authorList":{"11601537228":{"authorName":"Arpan Koirala","authorCustomAvatarUrl":"/users/11601537228/avatar"}},"diffAuthorList":{"11601537228":true},"shouldCreateSavepointBeforeApplyingNextRevision":false,"firstKeyRevision":5,"atext":{"text":"Hi Alexander,\n \nFollowing are the work expected from you during summer job:\n \n1.      Get familiar with PowerModelsDistribution package of Julia \nhttps://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/\nhttps://github.com/lanl-ansi/PowerModelsDistribution.jl\n \n2.      Add annual kWh in parser createGridDataCollectiob_dataframes.py: The file (\\\\Pola) has annual kWh randomly generated for all consumer of 160 feeders and also the phase is randomly allocated. Suggested Idea to explore is to go through the GIS file where file1 to file7 are smart meter data of 20 days. Modify the createGridDataCollectiob_dataframes.py to get sum of 20 days consumption from smart meter data and multiply by 15 to get annual kWh consumption. Also include the phase of the load which are known (GIS\\\\phase meters.xlsx). I suggest to go through a paper https://www.sciencedirect.com/science/article/abs/pii/S0142061519318836 to understand the raw data. \n \n3.      Implement the clustering algorithm in the paper: https://ieeexplore-ieee-org.kuleuven.ezproxy.kuleuven.be/document/7051294\nThe feeder in which the algorithm has to be applied is in box shared folder (\\\\Pola). It has 160 different feeders and the json file is formed by the python code “createGridDataCollectiob_dataframes.py” attached. The source file is in folder “test_network\\\\Sim_files_190128_Ok_V0\\\\GIS_data” It can be done in python I give you floor to explore opportunities. But I need some report regarding your approach.\n \n \n4.      Next thing is to use parser for PowerModelDistribution. Some good news there is already a parser made by Marta for IEEE European test system and that is also in the box file folder: Parser_Julia. This can be starting point for you to parse the json files or the main GIS file directly to the Julia format. This one will be starting point for your master thesis too. If you manage to do this in your summer job we can do more interesting thing with that file in the semester. \n \n\n","attribs":"*4|4+26*4+2*4*5+6*4|1+1o*4*a+1q*4|1+1*4*b+1j*4|2+3*4+2*4*5+6*4+23*4*c+6*4+dh*4*d+1z*4|2+w*4+2*4*5+6*4+1d*4*e+21*4|1+1*4+25*4*f+6*4|3+94*4+2*4*5+6*4|1+d8*4+1|2+2","opCount":28,"appliedAttribsCount":37,"maxAttribsOnSingleOp":2},"pool":{"numToAttrib":{"0":["author","a.4fz9s4pIrvcRKF5l"],"1":["align","left"],"2":["insertorder","first"],"3":["lmkr","1"],"4":["author","11601537228"],"5":["font-size-small","true"],"6":["link-MTU5NjUzNDU2MjU2My1odHRwczovL2xhbmwtYW5zaS5naXRodWIuaW8vUG93ZXJNb2RlbHNEaXN0cmlidXRpb24uamwvc3RhYmxlLw==","true"],"7":["link-MTU5NjUzNDU2MjU3MC1odHRwczovL2dpdGh1Yi5jb20vbGFubC1hbnNpL1Bvd2VyTW9kZWxzRGlzdHJpYnV0aW9uLmps","true"],"8":["link-MTU5NjUzNDU2MjU3Ny1odHRwczovL2llZWV4cGxvcmUtaWVlZS1vcmcua3VsZXV2ZW4uZXpwcm94eS5rdWxldXZlbi5iZS9kb2N1bWVudC83MDUxMjk0","true"],"9":["link-MTU5NjUzNDU2MjU4My1maWxlOi8vcG9sYS8=","true"],"10":["link-MTU5NjUzNTUzNzE4NC1odHRwczovL2xhbmwtYW5zaS5naXRodWIuaW8vUG93ZXJNb2RlbHNEaXN0cmlidXRpb24uamwvc3RhYmxlLw==","true"],"11":["link-MTU5NjUzNTUzNzE5Mi1odHRwczovL2dpdGh1Yi5jb20vbGFubC1hbnNpL1Bvd2VyTW9kZWxzRGlzdHJpYnV0aW9uLmps","true"],"12":["link-MTU5NjUzNTUzNzE5OC1maWxlOi8vcG9sYS8=","true"],"13":["link-MTU5NjUzNTUzNzIwNC1odHRwczovL3d3dy5zY2llbmNlZGlyZWN0LmNvbS9zY2llbmNlL2FydGljbGUvYWJzL3BpaS9TMDE0MjA2MTUxOTMxODgzNg==","true"],"14":["link-MTU5NjUzNTUzNzIxMC1odHRwczovL2llZWV4cGxvcmUtaWVlZS1vcmcua3VsZXV2ZW4uZXpwcm94eS5rdWxldXZlbi5iZS9kb2N1bWVudC83MDUxMjk0","true"],"15":["link-MTU5NjUzNTUzNzIxNS1maWxlOi8vcG9sYS8=","true"],"16":["removed","true"]},"nextNum":17},"chatHead":-1,"publicStatus":false,"passwordHash":null,"savedRevisions":[]}